generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  extensions        = [citext(schema: "public"), uuid_ossp(map: "uuid-ossp")]
}

model User {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(50)
  email         String   @unique @db.VarChar(100)
  password      String   @db.VarChar(255)
  postalCode    String   @db.VarChar(20)
  address       String   @db.VarChar(255)
  detailAddress String?  @db.VarChar(255)
  phone         String   @unique @db.VarChar(20)
  isAdmin       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  orders        Order[]
}

model Category {
  id         Int       @id @default(autoincrement())
  categoryId String    @unique @default(dbgenerated("uuid_generate_v4()"))
  name       String    @unique @db.VarChar(30)
  products   Product[]
}

model Product {
  id              Int         @id @default(autoincrement())
  title           String      @db.VarChar(100)
  author          String      @db.VarChar(50)
  publisher       String      @db.VarChar(50)
  publicationDate DateTime
  isbn            String      @unique @db.VarChar(13)
  description     String      @db.VarChar(3000)
  price           Float
  imagePath       String      @db.VarChar(255)
  stock           Int         @default(0)
  categoryId      Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  Category        Category    @relation(fields: [categoryId], references: [id])
}

model Order {
  id              Int            @id @default(autoincrement())
  userId          Int
  shippingStatus  ShippingStatus @default(READY)
  deliveryFee     Float
  totalPrice      Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  address         String
  addressDetail   String
  deliveryRequest String?
  postalCode      String
  recipientName   String
  contact         String
  orderId         String         @unique
  user            User           @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  amount    Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

enum ShippingStatus {
  READY
  SHIPPING
  DELIVERED
  CANCELLED
}

model ErrorLog {
  id         Int      @id @default(autoincrement())
  message    String   @db.VarChar(1000)
  type       String   @db.VarChar(100)
  stackTrace String?  @db.VarChar(3000)
  createdAt  DateTime @default(now())
}